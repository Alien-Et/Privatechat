name: 构建并发布 Flutter 应用

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: macos-latest  # 使用 macOS 支持 Android 和 Windows 构建

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4

      # 2. 设置 Java 环境（用于 Android 构建）
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 3. 设置 Flutter 环境
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'  # 最新稳定版
          channel: 'stable'

      # 4. 生成 Android 目录
      - name: 生成 Android 目录
        run: |
          flutter create . --platforms android  # 只生成 Android 平台目录

      # 5. 生成 local.properties 文件
      - name: 生成 local.properties
        run: |
          echo "sdk.dir=$(dirname $(dirname $(which flutter)))/android-sdk" > android/local.properties
          echo "flutter.sdk=$(dirname $(dirname $(which flutter)))" >> android/local.properties

      # 6. 获取 Flutter 依赖
      - name: 获取依赖
        run: flutter pub get

      # 7. 构建 Android APK
      - name: 构建 Android APK
        run: flutter build apk --release --verbose

      # 8. 构建 Windows 可执行文件
      - name: 构建 Windows 可执行文件
        run: |
          flutter config --enable-windows-desktop  # 启用 Windows 桌面支持
          flutter build windows --release --verbose

      # 9. 发布到 GitHub Release
      - name: 发布构建产物到 Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            build/windows/runner/Release/*.exe
          tag: v${{ github.run_number }}
          name: 版本 ${{ github.run_number }}
          body: "自动构建的 APK 和 Windows 可执行文件 - 构建于 ${{ github.event.head_commit.timestamp }}"
          token: ${{ secrets.GITHUB_TOKEN }}