name: 构建并发布 Flutter 应用

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: macos-latest

    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4

      # 2. 设置 Java 环境
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      # 3. 设置 Flutter 环境
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      # 4. 创建 Flutter 项目并写入代码
      - name: 创建项目并写入代码
        run: |
          # 创建项目（如果缺少 android 和 ios 目录）
          flutter create . --project-name private_chat

          # 写入 pubspec.yaml
          cat << 'EOF' > pubspec.yaml
          name: 去中心化聊天
          description: 一个去中心化的点对点聊天应用
          version: 1.0.0+1
          environment:
            sdk: '>=2.17.0 <3.0.0'
          dependencies:
            flutter:
              sdk: flutter
            flutter_webrtc: ^0.10.0
            shared_preferences: ^2.2.3
            provider: ^6.1.2
          dev_dependencies:
            flutter_test:
              sdk: flutter
          flutter:
            uses-material-design: true
          EOF

          # 创建 lib 目录并写入 main.dart
          mkdir -p lib
          cat << 'EOF' > lib/main.dart
          import 'package:flutter/material.dart';
          import '页面/首页.dart';

          void main() {
            runApp(const 去中心化聊天应用());
          }

          class 去中心化聊天应用 extends StatelessWidget {
            const 去中心化聊天应用({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: '去中心化聊天',
                theme: ThemeData.light().copyWith(
                  scaffoldBackgroundColor: Colors.grey[200],
                  primaryColor: Colors.blue[600],
                  textTheme: const TextTheme(bodyMedium: TextStyle(color: Colors.black87)),
                ),
                darkTheme: ThemeData.dark().copyWith(
                  scaffoldBackgroundColor: Colors.grey[800],
                  primaryColor: Colors.green[400],
                  textTheme: const TextTheme(bodyMedium: TextStyle(color: Colors.white70)),
                ),
                themeMode: ThemeMode.system,
                home: const 首页(),
              );
            }
          }
          EOF

          # 创建 lib/模型 目录并写入文件
          mkdir -p lib/模型
          cat << 'EOF' > lib/模型/好友.dart
          class 好友 {
            final String id;
            final String 名称;
            final String 头像网址;
            final bool 是否在线;

            好友({
              required this.id,
              required this.名称,
              this.头像网址 = '',
              this.是否在线 = false,
            });
          }
          EOF

          cat << 'EOF' > lib/模型/消息.dart
          class 消息 {
            final String 发送者ID;
            final String 内容;
            final DateTime 时间戳;
            final bool 是否自己;

            消息({
              required this.发送者ID,
              required this.内容,
              required this.时间戳,
              required this.是否自己,
            });
          }
          EOF

          # 创建 lib/页面 目录并写入文件
          mkdir -p lib/页面
          cat << 'EOF' > lib/页面/首页.dart
          import 'package:flutter/material.dart';
          import '聊天页面.dart';
          import '../组件/好友项.dart';
          import '../模型/好友.dart';

          class 首页 extends StatefulWidget {
            const 首页({super.key});

            @override
            _首页状态 createState() => _首页状态();
          }

          class _首页状态 extends State<首页> {
            final _页面控制器 = PageController();
            final List<好友> 好友列表 = List.generate(
              10,
              (index) => 好友(id: 'id$index', 名称: '好友 $index', 是否在线: index % 2 == 0),
            );

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('去中心化聊天'),
                  actions: [
                    IconButton(
                      icon: const Icon(Icons.search),
                      onPressed: () => showSearch(context: context, delegate: 聊天搜索代理(好友列表)),
                    ),
                    IconButton(
                      icon: const Icon(Icons.person_add),
                      onPressed: () => _显示添加好友对话框(context),
                    ),
                  ],
                ),
                body: Column(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(vertical: 8),
                      child: const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text('最近聊天', style: TextStyle(fontWeight: FontWeight.bold)),
                          SizedBox(width: 16),
                          Text('好友列表'),
                        ],
                      ),
                    ),
                    Expanded(
                      child: PageView(
                        controller: _页面控制器,
                        children: [
                          _构建聊天列表(),
                          _构建好友列表(),
                        ],
                      ),
                    ),
                  ],
                ),
              );
            }

            Widget _构建聊天列表() {
              return ListView.builder(
                itemCount: 好友列表.length,
                itemBuilder: (context, index) => ListTile(
                  leading: CircleAvatar(
                    backgroundColor: 好友列表[index].是否在线 ? Colors.green : Colors.grey,
                  ),
                  title: Text(好友列表[index].名称),
                  subtitle: const Text('最后一条消息'),
                  trailing: const Text('10:00'),
                  onTap: () => Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => 聊天页面(好友: 好友列表[index])),
                  ),
                ),
              );
            }

            Widget _构建好友列表() {
              return ListView.builder(
                itemCount: 好友列表.length,
                itemBuilder: (context, index) => 好友项(好友: 好友列表[index]),
              );
            }

            void _显示添加好友对话框(BuildContext context) {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: const Text('添加好友'),
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      ElevatedButton(
                        onPressed: () => print('扫描在线对等点'),
                        child: const Text('扫描在线对等点'),
                      ),
                      TextField(
                        decoration: const InputDecoration(labelText: '输入好友ID'),
                        onSubmitted: (id) => print('添加ID: $id'),
                      ),
                    ],
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('取消'),
                    ),
                  ],
                ),
              );
            }
          }

          class 聊天搜索代理 extends SearchDelegate {
            final List<好友> 好友列表;

            聊天搜索代理(this.好友列表);

            @override
            List<Widget> buildActions(BuildContext context) => [
                  IconButton(icon: const Icon(Icons.clear), onPressed: () => query = ''),
                ];

            @override
            Widget buildLeading(BuildContext context) => IconButton(
                  icon: const Icon(Icons.arrow_back),
                  onPressed: () => close(context, null),
                );

            @override
            Widget buildResults(BuildContext context) => _构建搜索结果();

            @override
            Widget buildSuggestions(BuildContext context) => _构建搜索结果();

            Widget _构建搜索结果() {
              final results = 好友列表.where((friend) => friend.名称.contains(query)).toList();
              return ListView.builder(
                itemCount: results.length,
                itemBuilder: (context, index) => 好友项(好友: results[index]),
              );
            }
          }
          EOF

          cat << 'EOF' > lib/页面/聊天页面.dart
          import 'package:flutter/material.dart';
          import '../模型/好友.dart';
          import '../模型/消息.dart';
          import '../组件/消息气泡.dart';

          class 聊天页面 extends StatefulWidget {
            final 好友 好友;

            const 聊天页面({super.key, required this.好友});

            @override
            _聊天页面状态 createState() => _聊天页面状态();
          }

          class _聊天页面状态 extends State<聊天页面> {
            final _输入控制器 = TextEditingController();
            final List<消息> 消息列表 = List.generate(
              10,
              (index) => 消息(
                发送者ID: index % 2 == 0 ? 'me' : 'friend',
                内容: '消息 $index',
                时间戳: DateTime.now(),
                是否自己: index % 2 == 0,
              ),
            );

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(widget.好友.名称),
                      Text(
                        '${widget.好友.是否在线 ? '在线' : '离线'} - IP: 203.0.113.1',
                        style: const TextStyle(fontSize: 12),
                      ),
                    ],
                  ),
                ),
                body: Column(
                  children: [
                    Expanded(
                      child: ListView.builder(
                        itemCount: 消息列表.length,
                        itemBuilder: (context, index) => 消息气泡(消息: 消息列表[index]),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8),
                      child: Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: _输入控制器,
                              decoration: const InputDecoration(hintText: '输入消息', border: OutlineInputBorder()),
                            ),
                          ),
                          IconButton(
                            icon: const Icon(Icons.send),
                            onPressed: () {
                              if (_输入控制器.text.isNotEmpty) {
                                setState(() {
                                  消息列表.add(消息(
                                    发送者ID: 'me',
                                    内容: _输入控制器.text,
                                    时间戳: DateTime.now(),
                                    是否自己: true,
                                  ));
                                  _输入控制器.clear();
                                });
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              );
            }
          }
          EOF

          # 创建 lib/组件 目录并写入文件
          mkdir -p lib/组件
          cat << 'EOF' > lib/组件/好友项.dart
          import 'package:flutter/material.dart';
          import '../模型/好友.dart';
          import '../页面/聊天页面.dart';

          class 好友项 extends StatelessWidget {
            final 好友 好友;

            const 好友项({super.key, required this.好友});

            @override
            Widget build(BuildContext context) {
              return ListTile(
                leading: CircleAvatar(
                  backgroundColor: 好友.是否在线 ? Colors.green : Colors.grey,
                  child: 好友.头像网址.isEmpty ? Text(好友.名称[0]) : null,
                  backgroundImage: 好友.头像网址.isNotEmpty ? NetworkImage(好友.头像网址) : null,
                ),
                title: Text(好友.名称),
                subtitle: Text(好友.是否在线 ? '在线' : '离线'),
                onTap: () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => 聊天页面(好友: 好友)),
                ),
              );
            }
          }
          EOF

          cat << 'EOF' > lib/组件/消息气泡.dart
          import 'package:flutter/material.dart';
          import '../模型/消息.dart';

          class 消息气泡 extends StatelessWidget {
            final 消息 消息;

            const 消息气泡({super.key, required this.消息});

            @override
            Widget build(BuildContext context) {
              return Align(
                alignment: 消息.是否自己 ? Alignment.centerRight : Alignment.centerLeft,
                child: Container(
                  margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: 消息.是否自己 ? Theme.of(context).primaryColor : Colors.grey[300],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    消息.内容,
                    style: TextStyle(color: 消息.是否自己 ? Colors.white : Colors.black),
                  ),
                ),
              );
            }
          }
          EOF

      # 5. 生成 local.properties 文件
      - name: 生成 local.properties
        run: |
          echo "sdk.dir=$(dirname $(dirname $(which flutter)))/android-sdk" > android/local.properties
          echo "flutter.sdk=$(dirname $(dirname $(which flutter)))" >> android/local.properties

      # 6. 获取 Flutter 依赖
      - name: 获取依赖
        run: flutter pub get

      # 7. 构建 APK（Android）
      - name: 构建 APK
        run: flutter build apk --release --verbose

      # 8. 构建 IPA（iOS）
      - name: 构建 IPA
        run: flutter build ipa --release --no-codesign

      # 9. 发布到 GitHub Release
      - name: 发布构建产物到 Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          tag: v${{ github.run_number }}
          name: 版本 ${{ github.run_number }}
          body: "自动构建的 APK 和 IPA - 构建于 ${{ github.event.head_commit.timestamp }}"
          token: ${{ secrets.GITHUB_TOKEN }}